# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:18:23+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class Actor(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='The name to display for the actor. If not provided, it is inferred from credentials supplied during case creation. When an email is provided, a display name must also be provided. This will be obfuscated if the user is a Google Support agent.',
    )
    email: Optional[str] = Field(
        None,
        description='The email address of the actor. If not provided, it is inferred from credentials supplied during case creation. If the authenticated principal does not have an email address, one must be provided. When a name is provided, an email must also be provided. This will be obfuscated if the user is a Google Support agent.',
    )
    googleSupport: Optional[bool] = Field(
        None, description='Output only. Whether the actor is a Google support actor.'
    )


class Attachment(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time at which the attachment was created.'
    )
    creator: Optional[Actor] = Field(
        None,
        description='Output only. The user who uploaded the attachment. Note, the name and email will be obfuscated if the attachment was uploaded by Google support.',
    )
    filename: Optional[str] = Field(
        None, description='The filename of the attachment (e.g. `"graph.jpg"`).'
    )
    mimeType: Optional[str] = Field(
        None,
        description='Output only. The MIME type of the attachment (e.g. text/plain).',
    )
    name: Optional[str] = Field(
        None, description='Output only. The resource name of the attachment.'
    )
    sizeBytes: Optional[str] = Field(
        None, description='Output only. The size of the attachment in bytes.'
    )


class Blobstore2Info(BaseModel):
    blobGeneration: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    blobId: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    downloadReadHandle: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    readToken: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    uploadMetadataContainer: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )


class Priority(Enum):
    PRIORITY_UNSPECIFIED = 'PRIORITY_UNSPECIFIED'
    P0 = 'P0'
    P1 = 'P1'
    P2 = 'P2'
    P3 = 'P3'
    P4 = 'P4'


class Severity(Enum):
    SEVERITY_UNSPECIFIED = 'SEVERITY_UNSPECIFIED'
    S0 = 'S0'
    S1 = 'S1'
    S2 = 'S2'
    S3 = 'S3'
    S4 = 'S4'


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    NEW = 'NEW'
    IN_PROGRESS_GOOGLE_SUPPORT = 'IN_PROGRESS_GOOGLE_SUPPORT'
    ACTION_REQUIRED = 'ACTION_REQUIRED'
    SOLUTION_PROVIDED = 'SOLUTION_PROVIDED'
    CLOSED = 'CLOSED'


class CaseClassification(BaseModel):
    displayName: Optional[str] = Field(
        None, description='The display name of the classification.'
    )
    id: Optional[str] = Field(
        None,
        description='The unique ID for a classification. Must be specified for case creation. To retrieve valid classification IDs for case creation, use `caseClassifications.search`.',
    )


class CloseCaseRequest(BaseModel):
    pass


class Comment(BaseModel):
    body: Optional[str] = Field(
        None,
        description='The full comment body. Maximum of 12800 characters. This can contain rich text syntax.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time when this comment was created.'
    )
    creator: Optional[Actor] = Field(
        None,
        description='Output only. The user or Google Support agent created this comment.',
    )
    name: Optional[str] = Field(
        None, description='Output only. The resource name for the comment.'
    )
    plainTextBody: Optional[str] = Field(
        None,
        description='Output only. DEPRECATED. An automatically generated plain text version of body with all rich text syntax stripped.',
    )


class ReferenceType(Enum):
    PATH = 'PATH'
    BLOB_REF = 'BLOB_REF'
    INLINE = 'INLINE'
    BIGSTORE_REF = 'BIGSTORE_REF'
    COSMO_BINARY_REFERENCE = 'COSMO_BINARY_REFERENCE'


class ContentTypeInfo(BaseModel):
    bestGuess: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    fromBytes: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    fromFileName: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    fromHeader: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    fromUrlPath: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )


class CreateAttachmentRequest(BaseModel):
    attachment: Optional[Attachment] = Field(
        None, description='Required. The attachment to be created.'
    )


class DiffVersionResponse(BaseModel):
    objectSizeBytes: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    objectVersion: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )


class DownloadParameters(BaseModel):
    allowGzipCompression: Optional[bool] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    ignoreRange: Optional[bool] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )


class Reason(Enum):
    REASON_UNSPECIFIED = 'REASON_UNSPECIFIED'
    RESOLUTION_TIME = 'RESOLUTION_TIME'
    TECHNICAL_EXPERTISE = 'TECHNICAL_EXPERTISE'
    BUSINESS_IMPACT = 'BUSINESS_IMPACT'


class Escalation(BaseModel):
    justification: Optional[str] = Field(
        None,
        description='Required. A free text description to accompany the `reason` field above. Provides additional context on why the case is being escalated.',
    )
    reason: Optional[Reason] = Field(
        None, description='Required. The reason why the Case is being escalated.'
    )


class ListAttachmentsResponse(BaseModel):
    attachments: Optional[List[Attachment]] = Field(
        None, description='The list of attachments associated with the given case.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve the next page of results. This should be set in the `page_token` field of subsequent `cases.attachments.list` requests. If unspecified, there are no more results to retrieve.',
    )


class ListCommentsResponse(BaseModel):
    comments: Optional[List[Comment]] = Field(
        None, description='The list of Comments associated with the given Case.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve the next page of results. This should be set in the `page_token` field of subsequent `ListCommentsRequest` message that is issued. If unspecified, there are no more results to retrieve.',
    )


class ReferenceType1(Enum):
    PATH = 'PATH'
    BLOB_REF = 'BLOB_REF'
    INLINE = 'INLINE'
    GET_MEDIA = 'GET_MEDIA'
    COMPOSITE_MEDIA = 'COMPOSITE_MEDIA'
    BIGSTORE_REF = 'BIGSTORE_REF'
    DIFF_VERSION_RESPONSE = 'DIFF_VERSION_RESPONSE'
    DIFF_CHECKSUMS_RESPONSE = 'DIFF_CHECKSUMS_RESPONSE'
    DIFF_DOWNLOAD_RESPONSE = 'DIFF_DOWNLOAD_RESPONSE'
    DIFF_UPLOAD_REQUEST = 'DIFF_UPLOAD_REQUEST'
    DIFF_UPLOAD_RESPONSE = 'DIFF_UPLOAD_RESPONSE'
    COSMO_BINARY_REFERENCE = 'COSMO_BINARY_REFERENCE'
    ARBITRARY_BYTES = 'ARBITRARY_BYTES'


class ObjectId(BaseModel):
    bucketName: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    generation: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    objectName: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )


class SearchCaseClassificationsResponse(BaseModel):
    caseClassifications: Optional[List[CaseClassification]] = Field(
        None, description='The classifications retrieved.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve the next page of results. This should be set in the `page_token` field of subsequent `SearchCaseClassificationsRequest` message that is issued. If unspecified, there are no more results to retrieve.',
    )


class OperationAction(Enum):
    OPERATION_ACTION_UNSPECIFIED = 'OPERATION_ACTION_UNSPECIFIED'
    CREATE_SUPPORT_ACCOUNT = 'CREATE_SUPPORT_ACCOUNT'
    UPDATE_SUPPORT_ACCOUNT = 'UPDATE_SUPPORT_ACCOUNT'
    PURCHASE_SUPPORT_ACCOUNT = 'PURCHASE_SUPPORT_ACCOUNT'


class WorkflowOperationType(Enum):
    UNKNOWN_OPERATION_TYPE = 'UNKNOWN_OPERATION_TYPE'
    WORKFLOWS_V1 = 'WORKFLOWS_V1'
    WORKFLOWS_V2 = 'WORKFLOWS_V2'


class WorkflowOperationMetadata(BaseModel):
    namespace: Optional[str] = Field(
        None,
        description='The namespace that the job was scheduled in. Must be included in the workflow metadata so the workflow status can be retrieved.',
    )
    operationAction: Optional[OperationAction] = Field(
        None, description='The type of action the operation is classified as.'
    )
    workflowOperationType: Optional[WorkflowOperationType] = Field(
        None,
        description='Which version of the workflow service this operation came from.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class Case(BaseModel):
    classification: Optional[CaseClassification] = Field(
        None, description='The issue classification applicable to this case.'
    )
    contactEmail: Optional[str] = Field(
        None,
        description="A user-supplied email address to send case update notifications for. This should only be used in BYOID flows, where we cannot infer the user's email address directly from their EUCs.",
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time this case was created.'
    )
    creator: Optional[Actor] = Field(
        None,
        description='The user who created the case. Note: The name and email will be obfuscated if the case was created by Google Support.',
    )
    description: Optional[str] = Field(
        None, description='A broad description of the issue.'
    )
    displayName: Optional[str] = Field(
        None, description='The short summary of the issue reported in this case.'
    )
    escalated: Optional[bool] = Field(
        None, description='Whether the case is currently escalated.'
    )
    languageCode: Optional[str] = Field(
        None,
        description='The language the user has requested to receive support in. This should be a BCP 47 language code (e.g., `"en"`, `"zh-CN"`, `"zh-TW"`, `"ja"`, `"ko"`). If no language or an unsupported language is specified, this field defaults to English (en). Language selection during case creation may affect your available support options. For a list of supported languages and their support working hours, see: https://cloud.google.com/support/docs/language-working-hours',
    )
    name: Optional[str] = Field(None, description='The resource name for the case.')
    priority: Optional[Priority] = Field(
        None,
        description='The priority of this case. If this is set, do not set severity.',
    )
    severity: Optional[Severity] = Field(
        None, description='REMOVED. The severity of this case. Use priority instead.'
    )
    state: Optional[State] = Field(
        None, description='Output only. The current status of the support case.'
    )
    subscriberEmailAddresses: Optional[List[str]] = Field(
        None, description='The email addresses to receive updates on this case.'
    )
    testCase: Optional[bool] = Field(
        None,
        description='Whether this case was created for internal API testing and should not be acted on by the support team.',
    )
    timeZone: Optional[str] = Field(
        None,
        description='The timezone of the user who created the support case. It should be in a format IANA recognizes: https://www.iana.org/time-zones. There is no additional validation done by the API.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The time this case was last updated.'
    )


class CompositeMedia(BaseModel):
    blobRef: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    blobstore2Info: Optional[Blobstore2Info] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    cosmoBinaryReference: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    crc32cHash: Optional[int] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    inline: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    length: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    md5Hash: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    objectId: Optional[ObjectId] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    path: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    referenceType: Optional[ReferenceType] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    sha1Hash: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )


class DiffChecksumsResponse(BaseModel):
    checksumsLocation: Optional[CompositeMedia] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    chunkSizeBytes: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    objectLocation: Optional[CompositeMedia] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    objectSizeBytes: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    objectVersion: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )


class DiffDownloadResponse(BaseModel):
    objectLocation: Optional[CompositeMedia] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )


class DiffUploadRequest(BaseModel):
    checksumsInfo: Optional[CompositeMedia] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    objectInfo: Optional[CompositeMedia] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    objectVersion: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )


class DiffUploadResponse(BaseModel):
    objectVersion: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    originalObject: Optional[CompositeMedia] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )


class EscalateCaseRequest(BaseModel):
    escalation: Optional[Escalation] = Field(
        None,
        description='The escalation object to be sent with the escalation request.',
    )


class ListCasesResponse(BaseModel):
    cases: Optional[List[Case]] = Field(
        None,
        description='The list of cases associated with the cloud resource, after any filters have been applied.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve the next page of results. This should be set in the `page_token` field of subsequent `ListCasesRequest` message that is issued. If unspecified, there are no more results to retrieve.',
    )


class Media(BaseModel):
    algorithm: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    bigstoreObjectRef: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    blobRef: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    blobstore2Info: Optional[Blobstore2Info] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    compositeMedia: Optional[List[CompositeMedia]] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    contentType: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    contentTypeInfo: Optional[ContentTypeInfo] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    cosmoBinaryReference: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    crc32cHash: Optional[int] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    diffChecksumsResponse: Optional[DiffChecksumsResponse] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    diffDownloadResponse: Optional[DiffDownloadResponse] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    diffUploadRequest: Optional[DiffUploadRequest] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    diffUploadResponse: Optional[DiffUploadResponse] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    diffVersionResponse: Optional[DiffVersionResponse] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    downloadParameters: Optional[DownloadParameters] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    filename: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    hash: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    hashVerified: Optional[bool] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    inline: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    isPotentialRetry: Optional[bool] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    length: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    md5Hash: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    mediaId: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    objectId: Optional[ObjectId] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    path: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    referenceType: Optional[ReferenceType1] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    sha1Hash: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    sha256Hash: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    timestamp: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )
    token: Optional[str] = Field(
        None, description='# gdata.* are outside protos with mising documentation'
    )


class SearchCasesResponse(BaseModel):
    cases: Optional[List[Case]] = Field(
        None,
        description='The list of Case associated with the cloud resource, after any filters have been applied.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve the next page of results. This should be set in the `page_token` field of subsequent `SearchCaseRequest` message that is issued. If unspecified, there are no more results to retrieve.',
    )
